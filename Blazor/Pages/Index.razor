@using ActiveQueryBuilder.Web.Server
@using ActiveQueryBuilder.Web.Server.Infrastructure.Factories
@using ActiveQueryBuilder.Web.Server.Services

@page "/"
@inject IJSRuntime Js
@inject IServiceProvider ServiceProvider
@implements IAsyncDisposable

<PageTitle>Blazor Rendering Demo</PageTitle>

<h1>Active Query Builder Blazor Demo</h1>

<div class="row">
    <div class="col-md-12">
        <h1>Blazor Demo</h1>
        <p>
            Active Query Builder starts immediately on the page load.
        </p>
    </div>
    <div class="col-md-12">
        <div id="qb"></div>
        <div class="qb-ui-layout">
            <div class="qb-ui-layout__top">
                <div class="qb-ui-layout__left">
                    <div class="qb-ui-structure-tabs">
                        <div class="qb-ui-structure-tabs__tab">
                            <input type="radio" id="tree-tab" name="qb-tabs" checked/>
                            <label for="tree-tab">Database</label>
                            <div class="qb-ui-structure-tabs__content">
                                <div id="treeview"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="qb-ui-layout__right">
                    <div id="navbar"></div>
                    <div id="canvas"></div>
                    <div id="statusbar"></div>
                    <div id="grid"></div>
                </div>
            </div>
            <div class="qb-ui-layout__bottom">
                <div id="sql"></div>
            </div>
        </div>
    </div>
</div>

@code {
    private DotNetObjectReference<Index>? _dotNetHelper;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetHelper = DotNetObjectReference.Create(this);

            await Js.InvokeVoidAsync("Helpers.setDotNetHelper", _dotNetHelper);
            await Js.InvokeVoidAsync("initializeQueryBuilder");
        }
    }

    [JSInvokable("OnSqlUpdated")]
    public async Task OnSqlUpdated()
    {
        var qb = await getQueryBuilder();
    }

    private async Task<QueryBuilder> getQueryBuilder()
    {
        var sessionId = await getSessionId();
        var storage = new KeyBasedQueryBuilderSessionStorage(ServiceProvider, sessionId);
        return storage.Get(sessionId);
    }

    private async Task<string> getSessionId()
    {
        return await Js.InvokeAsync<string>("getSessionId");
    }

    public async ValueTask DisposeAsync()
    {
        await Js.InvokeVoidAsync("disposeQueryBuilder");
    }
}